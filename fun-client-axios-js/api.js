"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 函数服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionsApi = exports.FunctionsApiFactory = exports.FunctionsApiFp = exports.FunctionsApiAxiosParamCreator = exports.ConfigsApi = exports.ConfigsApiFactory = exports.ConfigsApiFp = exports.ConfigsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * ConfigsApi - axios parameter creator
 * @export
 */
const ConfigsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取函数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ConfigsApiAxiosParamCreator = ConfigsApiAxiosParamCreator;
/**
 * ConfigsApi - functional programming interface
 * @export
 */
const ConfigsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ConfigsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 获取函数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConfiguration(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ConfigsApiFp = ConfigsApiFp;
/**
 * ConfigsApi - factory interface
 * @export
 */
const ConfigsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ConfigsApiFp)(configuration);
    return {
        /**
         *
         * @summary 获取函数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(options) {
            return localVarFp.getConfiguration(options).then((request) => request(axios, basePath));
        },
    };
};
exports.ConfigsApiFactory = ConfigsApiFactory;
/**
 * ConfigsApi - object-oriented interface
 * @export
 * @class ConfigsApi
 * @extends {BaseAPI}
 */
class ConfigsApi extends base_1.BaseAPI {
    /**
     *
     * @summary 获取函数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    getConfiguration(options) {
        return (0, exports.ConfigsApiFp)(this.configuration).getConfiguration(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConfigsApi = ConfigsApi;
/**
 * FunctionsApi - axios parameter creator
 * @export
 */
const FunctionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建函数
         * @param {string} name
         * @param {Array<string>} requestBody
         * @param {string} [runtime]
         * @param {string} [handler]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFunction: (name, requestBody, runtime, handler, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('createFunction', 'name', name);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('createFunction', 'requestBody', requestBody);
            const localVarPath = `/v1/function/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (runtime !== undefined) {
                localVarQueryParameter['runtime'] = runtime;
            }
            if (handler !== undefined) {
                localVarQueryParameter['handler'] = handler;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 删除函数
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunction: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('deleteFunction', 'name', name);
            const localVarPath = `/v1/function/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取函数
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunction: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getFunction', 'name', name);
            const localVarPath = `/v1/function/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取函数代码
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunctionData: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getFunctionData', 'name', name);
            const localVarPath = `/v1/function/{name}/data`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 查询支持的运行环境
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuntimes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/runtimes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 列出函数
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctions: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FunctionsApiAxiosParamCreator = FunctionsApiAxiosParamCreator;
/**
 * FunctionsApi - functional programming interface
 * @export
 */
const FunctionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FunctionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 创建函数
         * @param {string} name
         * @param {Array<string>} requestBody
         * @param {string} [runtime]
         * @param {string} [handler]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFunction(name, requestBody, runtime, handler, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFunction(name, requestBody, runtime, handler, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 删除函数
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunction(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFunction(name, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取函数
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunction(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFunction(name, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取函数代码
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunctionData(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFunctionData(name, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 查询支持的运行环境
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuntimes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRuntimes(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 列出函数
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctions(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFunctions(cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FunctionsApiFp = FunctionsApiFp;
/**
 * FunctionsApi - factory interface
 * @export
 */
const FunctionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FunctionsApiFp)(configuration);
    return {
        /**
         *
         * @summary 创建函数
         * @param {string} name
         * @param {Array<string>} requestBody
         * @param {string} [runtime]
         * @param {string} [handler]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFunction(name, requestBody, runtime, handler, cid, options) {
            return localVarFp.createFunction(name, requestBody, runtime, handler, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除函数
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunction(name, cid, options) {
            return localVarFp.deleteFunction(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取函数
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunction(name, cid, options) {
            return localVarFp.getFunction(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取函数代码
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunctionData(name, cid, options) {
            return localVarFp.getFunctionData(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 查询支持的运行环境
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuntimes(options) {
            return localVarFp.getRuntimes(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 列出函数
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFunctions(cid, options) {
            return localVarFp.listFunctions(cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FunctionsApiFactory = FunctionsApiFactory;
/**
 * FunctionsApi - object-oriented interface
 * @export
 * @class FunctionsApi
 * @extends {BaseAPI}
 */
class FunctionsApi extends base_1.BaseAPI {
    /**
     *
     * @summary 创建函数
     * @param {string} name
     * @param {Array<string>} requestBody
     * @param {string} [runtime]
     * @param {string} [handler]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    createFunction(name, requestBody, runtime, handler, cid, options) {
        return (0, exports.FunctionsApiFp)(this.configuration).createFunction(name, requestBody, runtime, handler, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 删除函数
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    deleteFunction(name, cid, options) {
        return (0, exports.FunctionsApiFp)(this.configuration).deleteFunction(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取函数
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    getFunction(name, cid, options) {
        return (0, exports.FunctionsApiFp)(this.configuration).getFunction(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取函数代码
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    getFunctionData(name, cid, options) {
        return (0, exports.FunctionsApiFp)(this.configuration).getFunctionData(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 查询支持的运行环境
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    getRuntimes(options) {
        return (0, exports.FunctionsApiFp)(this.configuration).getRuntimes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 列出函数
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    listFunctions(cid, options) {
        return (0, exports.FunctionsApiFp)(this.configuration).listFunctions(cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FunctionsApi = FunctionsApi;
