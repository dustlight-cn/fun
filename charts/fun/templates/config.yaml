# 创建 jobless-service 配置文件
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-service-config
data:
  application.yaml: |-
    client:
      id: {{ .Values.config.auth.clientId | quote }}
      secret: {{ .Values.config.auth.clientSecret | quote }}
      apiEndpoint: {{ .Values.config.auth.apiEndpoint | quote }}
      tokenUri: {{ .Values.config.auth.tokenUri | quote }}
      checkTokenUri: {{ .Values.config.auth.checkTokenUri | quote }}
      jwkSetUri: {{ .Values.config.auth.jwkSetUri | quote }}
    dustlight:
      fun:
        authorization-endpoint: {{ .Values.config.auth.authorizationEndpoint | quote }}
        system:
          system-function-prefix: system
        kubeless:
          ingress-class: {{ .Values.ingress.className | quote }}
          functions-namespace: {{ .Release.Namespace | quote }}
          host-format: {{ .Values.ingress.functionsHost | quote }}
          {{ if .Values.ingress.tls.functionHost.enabled }}
          host-tls: {{ .Release.Name }}-fun-service-host-tls
          {{ end }}
      auth:
        oauth2:
          client:
            client-id: ${client.id}
            client-secret: ${client.secret}
            api-endpoint: ${client.apiEndpoint}
            token-uri: ${client.tokenUri}
          resource-server:
            client-id: ${client.id}
            client-secret: ${client.secret}
            uri: ${client.checkTokenUri}
            jwk-set-uri: ${client.jwkSetUri}
      storage:
      {{ if eq .Values.config.storage.type "minio" }}
        minio:
          endpoint: {{ .Values.config.storage.endpoint | quote }}
          bucket: {{ .Values.config.storage.bucket | quote }}
          access-key-id: {{ .Values.config.storage.accessKey | quote }}
          secret-access-key: {{ .Values.config.storage.secretKey | quote }}
          region: {{ .Values.config.storage.region | quote }}
      {{ else if eq .Values.config.storage.type "tencent"  }}
        tencent:
          cos:
            bucket: {{ .Values.config.storage.bucket | quote }}
            secret-id: {{ .Values.config.storage.accessKey | quote }}
            secret-key: {{ .Values.config.storage.secretKey | quote }}
            region: {{ .Values.config.storage.region | quote }}
      {{ else if eq .Values.config.storage.type "alibaba"  }}
        alibaba:
          oss:
            endpoint: {{ .Values.config.storage.endpoint | quote }}
            bucket: {{ .Values.config.storage.bucket | quote }}
            access-key-id: {{ .Values.config.storage.accessKey | quote }}
            secret-access-key: {{ .Values.config.storage.secretKey | quote }}
      {{ end }}
    # SpringDoc 配置
    springdoc:
      api-docs:
        enabled: on
        path: /doc
      swagger-ui:
        path: /doc.html
        oauth:
          client-id: ${client.id}
          additional-query-string-params:
            jwt: true

    logging:
      level:
        cn.dustlight.fun.*: {{ .Values.logging }}
